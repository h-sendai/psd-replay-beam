名前

psd_replay - NEUNETエミュレータ

使用方法

./psd_replay [-d] [-F] [-h ip_address] [-p port] [-s usleep] [-z] [datafile

説明

NEUNETのプロトコルでデータを送信するエミュレータです。
データは、自前で作るわけではなく、datafileを読んでそれをその
まま送り出します。

datafileはどこかで実際に取得したデータファイルを利用するのが
簡単です。T0データはこのエミュレータでは発生させることができ
ません。T0データが必要ならT0データはdatafileに入っている必要
があります。

NEUNETはport 23を使用しますが、一般のUnixではport 23を使用
するにはroot権限が必要になるので、port 23456でlistenするように
しました。-p portでlistenするポートを変更することが可能です。
例えば -p 23 を付けて起動するとNEUNETモジュールのようにport 23
でlisten()しますが、通常のUnixではport 23を使用するにはroot権限
が必要です。

-Fオプションを指定しなかった場合はdatafileを読み終わったらlength 0
をクライアントに返し続けます。

オプション

-d        デバッグ出力を標準エラー出力に出す。

-F        foreverモード。datafileを読み終わったらもう一度読み直す。
          このオプションを指定しなかった場合はdatafileを読み終わ
          ったらlength 0を返し続ける。

-h ip_address
          このサーバーがlisten()するIPアドレスを指定する。指定
          されなかった場合は全てのネットワークインターフェイス
          でlisten()する。

-p port   ポート番号portでlisten()する。指定しなかった場合の
          デフォルトは23456。

-s usleep データをソケットにwrite()する前にusleepマイクロ秒
          スリープする。転送速度を遅くするためのはなはだ適当
          な方法。マイクロ秒で指定できるが現在のLinuxの実装
          では1usを指定しても1ms程度はsleepしてしまうことに
          注意。
-z        イベントデータ長として常に0を返す。このオプションを
          指定した場合、datafileは指定する必要がない(指定しても
          無視される)。

診断

psd_replay: (client exit?): Connection reset by peer

このサーバーが長さリクエストの受信を待っているときにクライアント側
からTCP RESETが送られてくると(クライアントがC-cで停止した場合など)
サーバーがこのメッセージを出します。

バグ

データファイルがないとなにもできない。イベントデータの生成は
どうにかなるかもしれないが、T0データの挿入はむずかしそう。

プログラムのバグではありませんが付属のMakefileは作者の趣味
でBSD makeの文法で書いてあります。

ファイルを読み終わったあとの動作。今はフラグを使ってEOFに
なったあとはread()しないようにしているが、EOFに達したファイル
を何度read()しても0が返ってくるだけでブロックなどしないので
read()させてその戻り値0をlengthとしてクライアントに送るほうが
フラグを使わなくてすむのでコードがすっきりするかもしれない。
が無意味にread()させるとシステムコール代が高くつくかもしれない。

想定されている利用目的

すでに性質がわかっているデータを利用してオンラインモニターの
使用感のテストなどに利用する。

ソースの出どころ

ネットワーク部分についてはStevensらの教科書Unix Network Programming
第3版に載っていたものをほぼそのまま使いました。

-s usleepオプション vs 転送速度

o KEKLAN 100Mbpsのネットワーク
o 33970528バイトのデータファイル
o 読み取りソフトウェアはsicat
o psd_replayを動かした計算機はPentium 4 2.4GHz (シングルコア)
o sicatを動かした計算機はPentium III 650MHz (シングルコア)
の環境で-sオプションで指定する秒数をいろいろ変えて転送スピード
を計測してみた。クライアントはいつも4096イベント(32kバイト)の
リクエストを出し、サーバーは最後のリプライを除き4096イベント
(32kバイト)データを返す。

-s usleep 転送にかかった時間(秒) 転送レート(MB/s)
無し              4.13             7.84
1000              6.75             4.80
2000              7.78             4.16
3000              8.82             3.67
4000              9.86             3.29
5000             10.89             2.97
10000            16.08             1.93
20000            26.45             1.22
50000            58.52             0.55

同じことをネットワークだけGbEに変えて計測
-s usleep 転送にかかった時間(秒) 転送レート(MB/s)
無し              0.77            42.07
1000              3.12            10.38  
2000              4.15             7.80
3000              5.19             6.24
4000              6.23             5.20
5000              7.26             4.46
10000            12.44             2.60
20000            22.82             1.42
50000            53.92             0.60

作者

千代浩司

変更履歴

* 2008-05-12
    - -zオプション(常にイベント長として0を返す)を追加。

* 2008-04-12
    - -Fオプション(foreverモード)追加。

* 2008-04-07
    - 大バグfix(クライアントから送られてくるリクエストイベントデータサイズの
      解釈を間違っていたので直した)。

* 2008-04-05
    - 第1版。とりあえず書いてみた。
    - lengthとdataで2回write()していたのをwritev()で1回にした。
    - 反復サーバーだったのをコンカレントサーバーに書き換えた。
    - ソケット関連(socket(), bind(), listen(), accept())の部分は
      他の用途でもできるだけそのまま使えるようにするために
      ファイルを読んでソケットに書く関数を分離して別ファイルにした。
    - 転送速度を遅くするためにwritev()の直前でusleep()するオプションを
      追加した。
