名前

psd_replay_beam - NEUNETエミュレータ

使用方法

usage: psd_replay_beam [-d] [-H hz] [-F] [-h ip_address] [-n data_size] [-p port] [-s usleep] [-v] data_file

Options:
    -d            debug
    -H hz         beam Hz (1 - 25)
    -F            forever mode.  Read data file again when reach EOF.
    -h ip_address listen IP address
    -n data_size  data bytes size per one beam shot
    -s usleep     sleep usleep usec just before sending data
    -v            verbose

説明

NEUNETのプロトコルでデータを送信するエミュレータです。データ
は、自前で作るわけではなく、datafileを読んでそれをそのまま送
り出します。

返すデータ長はビーム運転のときをまねるようにしました。ビーム
1ショットで何イベントのデータが生成するかを -n オプションで
指定します。ビーム周期を-HでHz単位で指定します。-Hで指定でき
る範囲は1から30Hzまでで、整数のみ指定できます。

detafileの最後の部分を読んだときにリクエストされた長さだけ
detafileに残りデータがなかった場合は読み取れた分だけ返します。

datafileはどこかで実際に取得したデータファイルを利用するのが
簡単です。T0データはこのエミュレータでは発生させることができ
ません。T0データが必要ならT0データはdatafileに入っている必要
があります。

NEUNETはport 23を使用しますが、一般のUnixではport 23を使用
するにはroot権限が必要になるので、port 23456でlistenするように
しました。-p portでlistenするポートを変更することが可能です。
例えば -p 23 を付けて起動するとNEUNETモジュールのようにport 23
でlisten()しますが、通常のUnixではport 23を使用するにはroot権限
が必要です。

-Fオプションを指定しなかった場合はdatafileを読み終わったらlength 0
をクライアントに返し続けます。

オプション

-d        デバッグ出力を標準エラー出力に出す。

-F        foreverモード。datafileを読み終わったらもう一度読み直す。
          このオプションを指定しなかった場合はdatafileを読み終わ
          ったらlength 0を返し続ける。

-h ip_address
          このサーバーがlisten()するIPアドレスを指定する。指定
          されなかった場合は全てのネットワークインターフェイス
          でlisten()する。

-H Hz     ビーム運転周期をHzで指定する。整数のみ指定可。1から30
          Hzまで。その他の値が指定された場合はエラーとなる。
          
-n イベントバイトサイズ
          ビーム1ショットあたり発生するイベントサイズをバイトで
          指定する。

-p port   ポート番号portでlisten()する。指定しなかった場合の
          デフォルトは23456。

-s usleep データをソケットにwrite()する前にusleepマイクロ秒
          スリープする。転送速度を遅くするためのはなはだ適当
          な方法。マイクロ秒で指定できるが現在のLinuxの実装
          では1usを指定しても1ms程度はsleepしてしまうことに
          注意。

診断

psd_replay: (client exit?): Connection reset by peer

このサーバーが長さリクエストの受信を待っているときにクライアント側
からTCP RESETが送られてくると(クライアントがC-cで停止した場合など)
サーバーがこのメッセージを出します。

バグ

データファイルがないとなにもできない。イベントデータの生成は
どうにかなるかもしれないが、T0データの挿入はむずかしそう。

プログラムのバグではありませんが付属のMakefileは作者の趣味
でBSD makeの文法で書いてあります。

ファイルを読み終わったあとの動作。今はフラグを使ってEOFに
なったあとはread()しないようにしているが、EOFに達したファイル
を何度read()しても0が返ってくるだけでブロックなどしないので
read()させてその戻り値0をlengthとしてクライアントに送るほうが
フラグを使わなくてすむのでコードがすっきりするかもしれない。
が無意味にread()させるとシステムコール代が高くつくかもしれない。

想定されている利用目的

すでに性質がわかっているデータを利用してオンラインモニターの
使用感のテストなどに利用する。

ソースの出どころ

ネットワーク部分についてはStevensらの教科書Unix Network Programming
第3版に載っていたものをほぼそのまま使いました。

sicatで読み取らせたときの例

psd_replay_beam -h 130.87.234.118 -H 25 -n 128000 -p 5555 /home/sendai/src/psd_replay_beam/test.dat

として25Hz、ビーム1ショットで128000バイトのデータが生成する
としてこのエミュレータを走らせて、sicatで読み取ったときの例
を以下に示します。最初のカラムは接続してからの経過時間。
次のカラムはその直前のカラムとの時間差を示します。
(中略)のところは0イベントが返ってきています。概ね40msec間隔
(だいたい42msecくらい)で0以外のデータが返ってきているのがわ
かります。

0.000000 0.000000 request #    1     0 events (     0 bytes )
0.002787 0.002787 request #    2     0 events (     0 bytes )
(中略)
0.037903 0.001251 request #   30     0 events (     0 bytes )
0.039151 0.001248 request #   31     0 events (     0 bytes )
0.048668 0.009517 request #   32  4096 events ( 32768 bytes )
0.054843 0.006175 request #   33  4096 events ( 32768 bytes )
0.059145 0.004302 request #   34  4096 events ( 32768 bytes )
0.064098 0.004953 request #   35  3712 events ( 29696 bytes )
0.065384 0.001286 request #   36     0 events (     0 bytes )
0.067703 0.002319 request #   37     0 events (     0 bytes )
(中略)
0.080401 0.001251 request #   42     0 events (     0 bytes )
0.081649 0.001248 request #   43     0 events (     0 bytes )
0.086874 0.005225 request #   44  4096 events ( 32768 bytes )
0.090108 0.003234 request #   45  4096 events ( 32768 bytes )
0.094396 0.004288 request #   46  4096 events ( 32768 bytes )
0.098219 0.003823 request #   47  3712 events ( 29696 bytes )
0.099503 0.001284 request #   48     0 events (     0 bytes )
0.101818 0.002315 request #   49     0 events (     0 bytes )
(中略)
0.120374 0.001247 request #   63     0 events (     0 bytes )
0.121630 0.001256 request #   64     0 events (     0 bytes )
0.125669 0.004039 request #   65  4096 events ( 32768 bytes )
0.129967 0.004298 request #   66  4096 events ( 32768 bytes )
0.134779 0.004812 request #   67  4096 events ( 32768 bytes )
0.138492 0.003713 request #   68  3712 events ( 29696 bytes )
0.140852 0.002360 request #   69     0 events (     0 bytes )
0.142164 0.001312 request #   70     0 events (     0 bytes )
(中略)
0.161966 0.001250 request #   85     0 events (     0 bytes )
0.163215 0.001249 request #   86     0 events (     0 bytes )
0.168416 0.005201 request #   87  4096 events ( 32768 bytes )
0.171665 0.003249 request #   88  4096 events ( 32768 bytes )
0.176607 0.004942 request #   89  4096 events ( 32768 bytes )
0.180330 0.003723 request #   90  3712 events ( 29696 bytes )
0.182677 0.002347 request #   91     0 events (     0 bytes )
0.183924 0.001247 request #   92     0 events (     0 bytes )
(中略)
0.201223 0.001250 request #  105     0 events (     0 bytes )
0.202469 0.001246 request #  106     0 events (     0 bytes )
0.207685 0.005216 request #  107  4096 events ( 32768 bytes )
0.210913 0.003228 request #  108  4096 events ( 32768 bytes )
0.215836 0.004923 request #  109  4096 events ( 32768 bytes )
0.219551 0.003715 request #  110  3712 events ( 29696 bytes )
0.221915 0.002364 request #  111     0 events (     0 bytes )
0.223163 0.001248 request #  112     0 events (     0 bytes )
(中略)
0.243302 0.001251 request #  127     0 events (     0 bytes )
0.244548 0.001246 request #  128     0 events (     0 bytes )
0.249768 0.005220 request #  129  4096 events ( 32768 bytes )
0.252998 0.003230 request #  130  4096 events ( 32768 bytes )
0.257924 0.004926 request #  131  4096 events ( 32768 bytes )
0.261646 0.003722 request #  132  3712 events ( 29696 bytes )
0.263991 0.002345 request #  133     0 events (     0 bytes )
0.265238 0.001247 request #  134     0 events (     0 bytes )
(中略)

作者

千代浩司

変更履歴

* 2008-06-14
    - ビーム運転時をまねるように変更したブランチpsd_replay_beam
      を作成。

* 2008-06-04
    - -cオプション(データを返す回を指定)を追加。

* 2008-05-12
    - -zオプション(常にイベント長として0を返す)を追加。
    - -Pオプション(確率)を追加。

* 2008-04-12
    - -Fオプション(foreverモード)追加。

* 2008-04-07
    - 大バグfix(クライアントから送られてくるリクエストイベントデータサイズの
      解釈を間違っていたので直した)。

* 2008-04-05
    - 第1版。とりあえず書いてみた。
    - lengthとdataで2回write()していたのをwritev()で1回にした。
    - 反復サーバーだったのをコンカレントサーバーに書き換えた。
    - ソケット関連(socket(), bind(), listen(), accept())の部分は
      他の用途でもできるだけそのまま使えるようにするために
      ファイルを読んでソケットに書く関数を分離して別ファイルにした。
    - 転送速度を遅くするためにwritev()の直前でusleep()するオプションを
      追加した。
